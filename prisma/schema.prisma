// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("POSTGRES_PRISMA_URL") // uses connection pooling
	directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// NextAuth Schema

model Account {
	id                 String  @id @default(cuid())
	userId             String
	type               String
	provider           String
	providerAccountId  String
	refresh_token      String?  @db.Text
	access_token       String?  @db.Text
	expires_at         Int?
	refresh_token_expires_in Int?
	token_type         String?
	scope              String?
	id_token           String?  @db.Text
	session_state      String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           		String   @id @default(cuid())
	sessionToken 		String   @unique
	userId       		String
	expires      		DateTime
	user         		User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id            		String    @id @default(cuid())
	name          		String?
	bio           		String? @db.Text
	age          		Int?
	email         		String?   @unique
	emailVerified 	 	 DateTime?
	image         		String?
	accounts      		Account[]
	sessions      		Session[]

	// Added columns for app
	teams         		Team[]
	owner 				Team[] @relation("TeamOwner")
	tasks				Task[] @relation("TaskCreator")
}

model VerificationToken {
	identifier 		 	 String
	token      			String   @unique
	expires    			DateTime

	@@unique([identifier, token])
}

// App Schema

model Team {
	id		  			String   @id @default(cuid())
	name        		String
	description 		String?
	ownerId     		String  
	members     		User[]	 	

	owner 				User @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
	projects			Project[]
}

model Project {
	id		  			String   @id @default(cuid())
	name        		String
	description 		String?
	teamId				String
	team				Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
	tasks				Task[]
}

model Task {
	id		  			String   @id @default(cuid())
	name        		String
	description 		String?
	projectId			String
	project				Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
	creatorId			String
	creator				User @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)

	importance			Int
}